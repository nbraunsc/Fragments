#this is where i will need to import my package, need to check name
import nicolefragment
from nicolefragment import *
from nicolefragment import Molecule, MIM

from pyscf import gto, scf, ci, cc, mp, hessian, lib, grad
from pyscf.geomopt.berny_solver import optimize
from berny import Berny, geomlib

largermol = Molecule.Molecule()
largermol.initalize_molecule('largermol')
energy_MIM = MIM.do_MIM2(1, 'MP2', 'sto-3g', 2, 'RHF', 'sto-3g', largermol, 'largermol')[0]

mol = gto.Mole(atom= '''
C 1.53370999999999991 -0.422080000000000011 0.00795000000000000047
C 0.488410000000000011 0.650270000000000015 -0.233509999999999995
C -0.95457000000000003 0.236729999999999996 0.0333600000000000008
O 2.71180999999999983 -0.0905399999999999955 0.127909999999999996
H 0.731369999999999965 1.49652999999999992 0.420430000000000026
H 0.584699999999999998 0.981169999999999987 -1.26924999999999999
H -1.27533000000000007 -0.548980000000000024 -0.660179999999999989
H -1.08258999999999994 -0.138149999999999995 1.05319000000000007
C 1.09967999999999999 -1.88342999999999994 -0.0250300000000000002
H 0.177260000000000001 -1.99469000000000007 0.554159999999999986
C 2.11283999999999983 -2.81406000000000001 0.570239999999999969
H 0.904939999999999967 -2.14984999999999982 -1.06834999999999991
H -1.62494999999999989 1.08833000000000002 -0.0999899999999999956
C 1.91501999999999994 -4.13708000000000009 0.650780000000000025
C 2.91706999999999983 -5.05499999999999972 1.25397000000000003
H 3.86662999999999979 -5.00121000000000038 0.710709999999999953
H 2.55930999999999997 -6.08441999999999972 1.2079200000000001
H 3.08739000000000008 -4.80241000000000007 2.30623999999999985
H 3.03760999999999992 -2.39016999999999991 0.961119999999999974
H 0.997140000000000026 -4.57669999999999977 0.268010000000000026       
        ''',
        basis='sto-3g')
mol.build()
#myHF = scf.RHF(mol)
#mol1 = optimize(myHF)
#opte = scf.RHF(mol1).kernel()

mp2_scanner = mp.MP2(scf.RHF(mol)).as_scanner()
mol1 = optimize(mp2_scanner)
opte = scf.RHF(mol1).kernel()

carbon = Molecule.Molecule()
carbon.initalize_molecule('carbonylavo')
energy_MIMc = MIM.do_MIM2(1, 'MP2', 'sto-3g', 2, 'RHF', 'sto-3g', carbon, 'carbonylavo')[0]

mol = gto.Mole(atom= '''
C 1.53375799999999995 -0.462241000000000013 0.0095879999999999993
C 0.495582000000000022 0.623371000000000008 -0.216293999999999986
C -0.946235000000000048 0.221083000000000002 0.0266860000000000014
O 2.72613700000000003 -0.160881999999999997 0.0978429999999999994
H 0.745496999999999965 1.45296099999999995 0.455058999999999991
H 0.603895999999999988 0.974870000000000014 -1.24810899999999991
H -1.26681099999999991 -0.548402999999999974 -0.683212999999999959
H -1.0856650000000001 -0.167846999999999996 1.0401959999999999
C 1.12147200000000002 -1.91145999999999994 -0.00906399999999999914
H 0.214191999999999994 -2.07186499999999985 0.57571300000000003
H 1.91196600000000005 -2.51271699999999987 0.450763999999999998
H 0.971530000000000005 -2.238591 -1.04025300000000009
H -1.60584600000000011 1.08578599999999992 -0.0979420000000000013       
        ''',
        basis='sto-3g')
mol.build()
#myHF = scf.RHF(mol)
#mol2 = optimize(myHF)
#optc = scf.RHF(mol2).kernel()

mp2_scanner2 = mp.MP2(scf.RHF(mol)).as_scanner()
mol2 = optimize(mp_scanner2)
optc = scf.RHF(mol2).kernel()

largermol_diff = energy_MIM - opte
rms_largermol = (largermol_diff**2)/2
print(rms_largermol, "RMS for largermol MP2")
print(largermol_diff, "largermol difference")

carbon_diff = energy_MIMc - optc
rms_carbonylmol = (carbon_diff**2)/2
print(rms_carbonylmol, 'RMS for carbonylavo MP2')
print(carbon_diff, 'difference')

#fluorene = Molecule.Molecule()
#fluorene.initalize_molecule('fluorene')     
#energy_MIM = MIM.do_MIM1(1, 'MP2', '6-31G*', fluorene, 'fluorene')[0]
#
#mol = gto.Mole(atom= '''
#C 3.43779800000000012 -0.247688999999999993 0.004862
#C 2.86537400000000009 -1.51895599999999997 -0.0164380000000000012
#C 1.47961999999999994 -1.69103300000000001 -0.0225890000000000014
#C 2.62389200000000011 0.895333000000000045 0.020684000000000001
#C 1.25133800000000006 0.73342099999999999 0.0146470000000000003
#C 0.679695999999999967 -0.561332999999999971 -0.00695699999999999964
#C 0.172292000000000001 1.77986299999999997 0.0280040000000000011
#C -1.08743499999999993 0.959938999999999987 0.0122950000000000004
#C -0.774765000000000037 -0.420484999999999998 -0.00844300000000000085
#C -1.77644200000000008 -1.37575500000000006 -0.0258899999999999998
#C -3.10346300000000008 -0.940973999999999977 -0.0224759999999999995
#C -2.40344699999999989 1.38218799999999997 0.0155999999999999993
#C -3.41161199999999987 0.414578999999999975 -0.00204900000000000004
#H 4. 1.53370999999999991 -0.422080000000000011 0.00795000000000000047
#H 3.51634499999999983 -2.39936699999999981 -0.0285809999999999988
#H 1.03460599999999991 -2.6910219999999998 -0.0393210000000000018
#H 3.07154600000000011 1.89360100000000009 0.0374270000000000019
#H 0.237902000000000002 2.44767000000000001 -0.850575999999999999
#H 0.233509999999999995 2.42092000000000018 0.926607999999999987
#H -1.531582 -2.44257899999999983 -0.041928
#H -3.91138999999999992 -1.67990799999999996 -0.0361129999999999993
#H -2.65127600000000019 2.44778099999999998 0.0316470000000000015
#H -4.45976700000000026 0.731491000000000002 0.000259999999999999977
#                        ''',
#                        basis='6-31G*')
#
#mol.build()
#myHF = scf.RHF(mol)
#mp2_scanner = mp.MP2(scf.RHF(mol)).as_scanner()
#mol1 = optimize(mp2_scanner)
#opte = scf.RHF(mol1).kernel()

#fluorene_diff = energy_MIM - opte
#rms_fluorene = (fluorene_diff**2)/2
#print(fluorene_diff, "fluroene difference")
#print(rms_fluroene, "RMS for fluorene")



